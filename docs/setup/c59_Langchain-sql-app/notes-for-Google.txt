

For Gemini
----------------------------------------------------------
I have this working script to get Youtube comments using a Google API 

  import   dotenv   from 'dotenv'; dotenv.config() 
  import { google } from 'googleapis';

// 05.1 Write function getYoutubeComments
// -------------------------------------------------
    var pYouTube = google.youtube(
         { version: 'v3'
         , auth: process.env.GOOGLE_API_KEY
           } );
// -------------------------------------------------

  async function getYoutubeComments() {

 return new Promise( ( resolve, reject ) => {

        pYouTube.commentThreads.list(
         { part:      'snippet'
         , videoId:   'JTxsNm9IdYU'
         , maxResults: 100 }
        , (err, res) => {
           if ( err ) reject( err );
           resolve( res.data.items );
           } );
        } );
        } // eof getYoutubeComments 

Is there a similar API to access Google Photo.  If so, could you re-write it for me. 

If not, could you rewrite this script to access Google's Photos API using fetch to just get a list of my photos. 

 import dotenv   from 'dotenv'; dotenv.config() 

  const aURL  = 'photoslibrary.googleapis.com'
  const aKey  =  process.env.GOOGLE_API_KEY

  const pData = { 
       "whatever": 0   
        } 
  
  const pOptions = {
        method: 'POST',
        headers: {
          'Content-Type':  'application/json',
          'Authorization': `Bearer ${aKey}`,
           },
        body: JSON.stringify( pData ),
        };
  
 fetch( aURL, pOptions )
       .then(  pResponse => pResponse.json() )
       .then(  pResult => {
           console.log( pResult );
           } )
       .catch( pError => {
           console.error( pError );
           } );
  
-------------------------------------------------------------------------
AIApps_dev01-robin_c62-Google-Photos


//const fs = require('fs');
//const { google } = require('googleapis');
 import   dotenv   from 'dotenv'; dotenv.config() 
 import { google } from 'googleapis';

// Read credentials from file   
//const credentialsPath = './path/to/your/credentials.json';   // Replace with your downloaded credentials file path
//const credentials     =  JSON.parse( fs.readFileSync( credentialsPath ) );

async function getPhotosList() {
  try {
  const credentials = { "web" :
          { "client_id"       :  process.env.GOOGLE_CLIENT_ID + ".apps.googleusercontent.com"  // 1098022921730-duu95t6fljj20rtildv07km7q55oapfb
          , "project_id"      : "photos-dev02-rob-1693697865078"
          , "auth_uri"        : "https://accounts.google.com/o/oauth2/auth"
          , "token_uri"       : "https://oauth2.googleapis.com/token"
          , "auth_provider_x509_cert_url" : "https://www.googleapis.com/oauth2/v1/certs"
          , "client_secret"   :  process.env.GOOGLE_SECRET   // "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"
          }  }    
    
  const scopes = [ 'https://www.googleapis.com/auth/photoslibrary.readonly' ]; // Set scopes for the API

  const oAuth2Client = new google.auth.OAuth2(  // Initialize OAuth2 client
        credentials.client_id,
        credentials.client_secret,
//      credentials.redirect_uris[0],
//      scopes
        );
    
  await oAuth2Client.getAccessToken();  // Get an access token
    
  const photos   =  google.photoslibrary({ version: 'v1', auth: oAuth2Client });  // Create Photos library service
    
  const response =  await photos.albums.list({ pageSize: 10 });  // List albums
  const albums   =  response.data.albums;
    
  const photosList = [];  // Extract photos from each album
   for (const album of albums) {
        const albumPhotos = await photos.mediaItems.list({ albumId: album.id });
        photosList.push( ...albumPhotos.data.mediaItems );
        }



Thank you, but I have a couple of questions before I execute your script.  This line 

   credentials.redirect_uris[0] 

references: redirect_uris[0], but it is not in the credentials.json file.  
Does this get added by selecting: `Authorized redirect URIs` when I created the credential on 
the Google page, https://console.cloud.google.com/apis/credentials/oauthclient.  
Or is it not needed for a local NodeJS app and so I should comment it out.  

Second, you define a variable scopes, but it is never used.  


-------------------------------------------------------------
Are you sure that redentials.redirect_uris[0] or scropes are not needed.  I get this eror on this line: await oAuth2Client.getAccessToken();
No refresh token or refresh handler callback is set.

---

I am using import { google } from 'googleapis';  And while new google.auth.OAuth2 works, 
I'm getting google.photoslibrary is not a function



import fs from 'fs';

// Replace with your downloaded credentials file path
const credentialsPath = './path/to/your/credentials.json';

async function getAlbumsList() {
  try {
    // Read credentials from file
    const credentials = JSON.parse(await fs.promises.readFile(credentialsPath));

    // Access token (replace with your actual token)
    const accessToken = 'YOUR_ACCESS_TOKEN'; // Replace with actual token

    // API endpoint
    const url = 'https://photoslibrary.googleapis.com/v1/albums';

    // Authorization header
    const headers = {
      Authorization: `Bearer ${accessToken}`,
    };

    // Fetch albums data
    const response = await fetch(url, { headers });

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    const data = await response.json();

    // Process albums data
    const albums = data.albums;
    console.log('--- Albums ---');
    for (const album of albums) {
      console.log(`ID: ${album.id}`);
      console.log(`Title: ${album.title}`);
      console.log(`Product URL: ${album.productUrl}`);
      console.log(`Cover Photo URL: ${album.coverPhotoBaseUrl}`);
      console.log(`Number of media items: ${album.mediaItemsCount}`);
      console.log('---');
    }

    // Handle pagination if needed
    if (data.nextPageToken) {
      console.log('--- More albums available, use nextPageToken for pagination ---');
    }
  } catch (error) {
    console.error(error);
  }
}

getAlbumsList();


---------------------------------------------------------------------------------------------

JavaScript
import fs from 'fs/promises';
import { google } from 'googleapis';

// Replace with your downloaded credentials file path
const credentialsPath = './path/to/your/credentials.json';

// Replace with your redirect URI (configured in Google Cloud Console)
const redirectUri = 'YOUR_REDIRECT_URI';

// Scopes for the API
const scopes = ['https://www.googleapis.com/auth/photoslibrary.readonly'];

async function getAccessToken() {
  try {
    // Read credentials from file
    const credentials = JSON.parse(await fs.readFile(credentialsPath));

    // Check if access token exists and is not expired
    const existingToken = process.env.GOOGLE_PHOTOS_ACCESS_TOKEN;
    if (existingToken && isTokenValid(existingToken)) {
      return existingToken;
    }

    // Initialize OAuth2 client
    const oAuth2Client = new google.auth.OAuth2(
      credentials.client_id,
      credentials.client_secret,
      redirectUri
    );

    // Check if authorization code is available
    const authorizationCode = process.env.GOOGLE_PHOTOS_AUTH_CODE;
    if (authorizationCode) {
      // Exchange code for tokens
      const { tokens } = await oAuth2Client.getToken(authorizationCode);
      process.env.GOOGLE_PHOTOS_ACCESS_TOKEN = tokens.access_token;
      process.env.GOOGLE_PHOTOS_REFRESH_TOKEN = tokens.refresh_token;
      return tokens.access_token;
    }

    // Redirect user for authorization if no code or token available
    const authorizationUrl = oAuth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: scopes,
    });
    console.log('Please visit this URL and authorize the application:', authorizationUrl);
    throw new Error('User authorization required');
  } catch (error) {
    console.error(error);
    throw error;
  }
}

function isTokenValid(token) {
  // Implement logic to check token expiration (e.g., using token expiry time)
  // Replace with your actual token validation logic
  return true; // Placeholder for actual validation
}

export default getAccessToken;